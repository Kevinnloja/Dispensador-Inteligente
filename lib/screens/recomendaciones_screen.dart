import 'package:flutter/material.dart';

// Pantalla de recomendaciones de alimentaci√≥n
class RecomendacionesScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Barra de aplicaci√≥n
      appBar: AppBar(
        title: Text(
          'Recomendaciones de Alimentaci√≥n', // T√≠tulo de la pantalla
          style: TextStyle(color: Colors.white),
        ),
        backgroundColor:
            Colors.deepPurple, // Color de fondo de la barra de aplicaci√≥n
      ),
      // Contenido de la pantalla
      body: Container(
        // Decoraci√≥n con gradiente de colores
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Color(0xFF3F3F9C),
              Color(0xFF5A46B2)
            ], // Colores del gradiente
            begin: Alignment.topLeft, // Inicio del gradiente
            end: Alignment.bottomRight, // Fin del gradiente
          ),
        ),
        // Contenido centrado y desplazable
        child: Center(
          child: SingleChildScrollView(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // Construye un t√≠tulo de categor√≠a
                _buildCategoriaTitulo('Razas Peque√±as', Colors.blue,
                    'Ejemplos de razas peque√±as: Chihuahua, Pomerania, Yorkshire'),
                // Construye una recomendaci√≥n para razas peque√±as
                _buildRecomendacion(
                  'Croquetas especiales, 3 veces al d√≠a.', // T√≠tulo de la recomendaci√≥n
                  [
                    'üê∂ Edad: De 45 d√≠as a 1 a√±o.',
                    'üçΩ Porci√≥n: Aprox. 30-60g por comida.', // Lista de recomendaciones
                    '‚è∞ Intervalo: Ma√±ana y tarde.',
                    'ü•ï Adem√°s, proporcione snacks saludables como 10-20g de zanahorias peque√±as.',
                    'üêæ Para cachorros, inicie con alimentos para cachorros y ajuste la cantidad seg√∫n el crecimiento.',
                    'üë¥üèΩ Para mascotas mayores, considere alimentos para perros mayores ricos en antioxidantes y nutrientes para la salud cognitiva y articular.',
                    'üìå Pautas adicionales: Introduzca cambios en la dieta gradualmente para evitar problemas digestivos.',
                  ],
                  Icons.pets, // Icono de la recomendaci√≥n
                  Colors.blue, // Color de fondo
                ),
                // Construye un t√≠tulo de categor√≠a
                _buildCategoriaTitulo('Razas Medianas', Colors.green,
                    'Ejemplos de razas medianas: Bulldog Franc√©s, Beagle, Cocker Spaniel'),
                // Construye una recomendaci√≥n para razas medianas
                _buildRecomendacion(
                  'Croquetas balanceadas, 2 comidas al d√≠a.', // T√≠tulo de la recomendaci√≥n
                  [
                    'üê∂ Edad: De m√°s de 1 a√±o a 7 a√±os.',
                    'üçΩ  Porci√≥n: Aprox. 60-120g por comida.', // Lista de recomendaciones
                    '‚è∞ Intervalo: Ma√±ana, tarde y noche.',
                    'ü•© Incluya alimentos frescos como 50-100g de carne magra y verduras.',
                    'üë¥üèΩ A medida que envejece, ajuste la dieta seg√∫n la actividad f√≠sica.',
                    'üë¥üèΩ Para mascotas mayores, adapte la dieta seg√∫n la actividad f√≠sica y considere alimentos para perros mayores que apoyen la salud general.',
                    'üìå Pautas adicionales: Monitoree el peso y ajuste las porciones seg√∫n sea necesario. Consulte a un veterinario regularmente.',
                  ],
                  Icons.pets, // Icono de la recomendaci√≥n
                  Colors.green, // Color de fondo
                ),
                // Construye un t√≠tulo de categor√≠a
                _buildCategoriaTitulo('Razas Grandes', Colors.orange,
                    'Ejemplos de razas grandes: Labrador Retriever, Pastor Alem√°n, Golden Retriever'),
                // Construye una recomendaci√≥n para razas grandes
                _buildRecomendacion(
                  'Croquetas con glucosamina, 2 veces al d√≠a.', // T√≠tulo de la recomendaci√≥n
                  [
                    'üê∂ Edad: De 7 a√±os en adelante.',
                    'üçΩ  Porci√≥n: Aprox. 100-200g por comida.', // Lista de recomendaciones
                    '‚è∞ Intervalo: Ma√±ana y noche.',
                    'ü•© Aseg√∫rese de proporcionar suficientes suplementos de calcio para el desarrollo √≥seo.',
                    'üê∂ En pacientes geri√°tricos se recomienda balanceado menor en grasa, con glucosamina y contraprotectores.',
                    'üë¥üèΩ Ajuste la dieta seg√∫n la edad y considere alimentos para la salud de las articulaciones.',
                    'üë¥üèΩ Para mascotas mayores, considere alimentos para perros mayores y suplementos que apoyen la salud de las articulaciones y la movilidad.',
                    'üìå Pautas adicionales: Controle la ingesta cal√≥rica para prevenir el aumento de peso. Consulte a un veterinario para pautas espec√≠ficas de salud articular.',
                  ],
                  Icons.pets, // Icono de la recomendaci√≥n
                  Colors.orange, // Color de fondo
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Construye un t√≠tulo de categor√≠a
  Widget _buildCategoriaTitulo(
      String title, Color backgroundColor, String razasEjemplos) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 20),
      decoration: BoxDecoration(
        color: backgroundColor, // Color de fondo del contenedor
        borderRadius: BorderRadius.circular(16), // Bordes redondeados
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2), // Sombra
            spreadRadius: 2,
            blurRadius: 8,
            offset: Offset(0, 4),
          ),
        ],
      ),
      padding: EdgeInsets.all(20),
      child: Column(
        children: [
          // T√≠tulo de la categor√≠a
          Text(
            title,
            style: TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.bold,
              fontFamily: 'Roboto',
              color: Colors.white,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 12),
          // Ejemplos de razas
          Text(
            razasEjemplos,
            style: TextStyle(
              fontSize: 16,
              fontFamily: 'Roboto',
              color: Colors.white,
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  // Construye una recomendaci√≥n
  Widget _buildRecomendacion(String titulo, List<String> recomendaciones,
      IconData icon, Color backgroundColor) {
    return Container(
      width: 320,
      margin: EdgeInsets.symmetric(vertical: 15),
      decoration: BoxDecoration(
        color: Colors.white, // Color de fondo del contenedor
        borderRadius: BorderRadius.circular(16), // Bordes redondeados
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1), // Sombra
            spreadRadius: 1,
            blurRadius: 4,
            offset: Offset(0, 3),
          ),
        ],
      ),
      padding: EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Icono y t√≠tulo de la recomendaci√≥n
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                icon,
                size: 40,
                color: backgroundColor,
              ),
              SizedBox(width: 12),
              Text(
                'Recomendaci√≥n',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Roboto',
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          SizedBox(height: 12),
          // T√≠tulo de la recomendaci√≥n
          Container(
            width: 280,
            child: Text(
              titulo,
              style: TextStyle(
                fontSize: 16,
                fontFamily: 'Roboto',
                color: Colors.black87,
              ),
            ),
          ),
          SizedBox(height: 20),
          // Detalles de la recomendaci√≥n
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                icon,
                size: 40,
                color: backgroundColor,
              ),
              SizedBox(width: 12),
              Text(
                'Detalles',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  fontFamily: 'Roboto',
                  color: Colors.black87,
                ),
              ),
            ],
          ),
          SizedBox(height: 12),
          // Lista de recomendaciones
          Container(
            width: 280,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: recomendaciones
                  .map(
                    (recomendacion) => Padding(
                      padding: const EdgeInsets.only(bottom: 12),
                      child: Text(
                        '‚Ä¢ $recomendacion',
                        style: TextStyle(
                          fontSize: 16,
                          fontFamily: 'Roboto',
                          color: Colors.black87,
                        ),
                      ),
                    ),
                  )
                  .toList(),
            ),
          ),
        ],
      ),
    );
  }
}

// Funci√≥n principal
void main() {
  runApp(MaterialApp(
    home:
        RecomendacionesScreen(), // Ejecuta la pantalla de recomendaciones al iniciar la aplicaci√≥n
  ));
}
